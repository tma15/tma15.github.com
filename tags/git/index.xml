<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>git on Now is better than never.</title>
    <link>https://tma15.github.io/tags/git/</link>
    <description>Recent content in git on Now is better than never.</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Sat, 28 Jan 2023 15:51:28 +0900</lastBuildDate><atom:link href="https://tma15.github.io/tags/git/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>【Python】pre-commitを使ってコミット前にプログラムを自動検査する</title>
      <link>https://tma15.github.io/blog/2023/01/28/pythonpre-commit%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E3%82%B3%E3%83%9F%E3%83%83%E3%83%88%E5%89%8D%E3%81%AB%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%A0%E3%82%92%E8%87%AA%E5%8B%95%E6%A4%9C%E6%9F%BB%E3%81%99%E3%82%8B/</link>
      <pubDate>Sat, 28 Jan 2023 15:51:28 +0900</pubDate>
      
      <guid>https://tma15.github.io/blog/2023/01/28/pythonpre-commit%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E3%82%B3%E3%83%9F%E3%83%83%E3%83%88%E5%89%8D%E3%81%AB%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%A0%E3%82%92%E8%87%AA%E5%8B%95%E6%A4%9C%E6%9F%BB%E3%81%99%E3%82%8B/</guid>
      <description>&lt;p&gt;本記事では&lt;a href=&#34;https://pre-commit.com/index.html&#34;&gt;pre-commit&lt;/a&gt;を使ってコミット前にPythonプログラムを自動検査する方法を紹介します。
モジュールのインポート順序や行あたりの文字数を始め、人が意識せずに標準化したいルールは多くあります。
このようなルールをコミット前に自動で検査・修正することでより簡単にきれいなプログラム開発を進められます。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>【pybind11】サブモジュールごとにファイルを分割してPythonモジュールを作成する</title>
      <link>https://tma15.github.io/blog/2021/10/09/pybind11%E3%82%B5%E3%83%96%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB%E3%81%94%E3%81%A8%E3%81%AB%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92%E5%88%86%E5%89%B2%E3%81%97%E3%81%A6python%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB%E3%82%92%E4%BD%9C%E6%88%90%E3%81%99%E3%82%8B/</link>
      <pubDate>Sat, 09 Oct 2021 13:05:41 +0900</pubDate>
      
      <guid>https://tma15.github.io/blog/2021/10/09/pybind11%E3%82%B5%E3%83%96%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB%E3%81%94%E3%81%A8%E3%81%AB%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92%E5%88%86%E5%89%B2%E3%81%97%E3%81%A6python%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB%E3%82%92%E4%BD%9C%E6%88%90%E3%81%99%E3%82%8B/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://pybind11.readthedocs.io/en/stable/&#34;&gt;pybind11&lt;/a&gt;を使うことでC++で書いたライブラリをPythonから利用できるようになります。
例えばDeep LearningフレームワークのPyTorchもコア部分をC++で&lt;a href=&#34;https://github.com/pytorch/pytorch/blob/master/torch/csrc/utils/pybind.h&#34;&gt;実装&lt;/a&gt;し、pybind11を使ってPythonから利用できるようになっています。
pybind11の公式リファレンスを読むことで基本的なことはわかったのですが、Pythonモジュールをサブモジュールごとにファイルに分割する方法がわからなかったので本記事を作成しました。
特にプログラムが複雑になってきたときにファイルを分割してサブモジュールを作成したいことが出てくると思います。
ベストプラクティスなのかわかりませんが、本記事が同じ疑問を持っている方の解決策になれば幸いです。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>【C&#43;&#43;】CMakeでGoogle Testをリンクできるようにする</title>
      <link>https://tma15.github.io/blog/2020/08/08/c-cmake%E3%81%A7google-test%E3%82%92%E3%83%AA%E3%83%B3%E3%82%AF%E3%81%A7%E3%81%8D%E3%82%8B%E3%82%88%E3%81%86%E3%81%AB%E3%81%99%E3%82%8B/</link>
      <pubDate>Sat, 08 Aug 2020 13:35:00 +0900</pubDate>
      
      <guid>https://tma15.github.io/blog/2020/08/08/c-cmake%E3%81%A7google-test%E3%82%92%E3%83%AA%E3%83%B3%E3%82%AF%E3%81%A7%E3%81%8D%E3%82%8B%E3%82%88%E3%81%86%E3%81%AB%E3%81%99%E3%82%8B/</guid>
      <description>&lt;p&gt;本記事ではC++の単体テストフレームワークである&lt;a href=&#34;https://github.com/google/googletest&#34;&gt;Google Test&lt;/a&gt;を、&lt;a href=&#34;https://cmake.org/&#34;&gt;CMake&lt;/a&gt;を使ってプログラムにリンクできるようにするための方法を紹介します。
Google Testを毎回手動でダウンロードするのは面倒ですが、本記事で紹介する方法ではCMake内でGoogle Testをgit submoduleで管理できます。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>【Git】ブランチを作成して開発するときに使う便利な機能</title>
      <link>https://tma15.github.io/blog/2020/04/12/git%E3%83%96%E3%83%A9%E3%83%B3%E3%83%81%E3%82%92%E4%BD%9C%E6%88%90%E3%81%97%E3%81%A6%E9%96%8B%E7%99%BA%E3%81%99%E3%82%8B%E3%81%A8%E3%81%8D%E3%81%AB%E4%BD%BF%E3%81%86%E4%BE%BF%E5%88%A9%E3%81%AA%E6%A9%9F%E8%83%BD/</link>
      <pubDate>Sun, 12 Apr 2020 14:52:38 +0900</pubDate>
      
      <guid>https://tma15.github.io/blog/2020/04/12/git%E3%83%96%E3%83%A9%E3%83%B3%E3%83%81%E3%82%92%E4%BD%9C%E6%88%90%E3%81%97%E3%81%A6%E9%96%8B%E7%99%BA%E3%81%99%E3%82%8B%E3%81%A8%E3%81%8D%E3%81%AB%E4%BD%BF%E3%81%86%E4%BE%BF%E5%88%A9%E3%81%AA%E6%A9%9F%E8%83%BD/</guid>
      <description>&lt;p&gt;本記事では&lt;a href=&#34;https://gist.github.com/Gab-km/3705015&#34;&gt;GitHub Flow&lt;/a&gt;のように機能追加やバグ修正などの度にブランチを作成して開発を進める際によく利用する機能をユースケースに分けて紹介します。本記事のキーワードは&lt;code&gt;stash&lt;/code&gt;、&lt;code&gt;rebase&lt;/code&gt;、&lt;code&gt;cherry-pick&lt;/code&gt;です。
これらの機能を利用することで、複数のブランチで非同期的に開発が進んでも、簡単に差分を自分のワーキングディレクトリに取り組むことができるようになります。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>gitで指定したコミットIDの状態に戻す</title>
      <link>https://tma15.github.io/blog/2015/12/20/git%E3%81%A7%E6%8C%87%E5%AE%9A%E3%81%97%E3%81%9F%E3%82%B3%E3%83%9F%E3%83%83%E3%83%88id%E3%81%AE%E7%8A%B6%E6%85%8B%E3%81%AB%E6%88%BB%E3%81%99/</link>
      <pubDate>Sun, 20 Dec 2015 07:57:41 +0900</pubDate>
      
      <guid>https://tma15.github.io/blog/2015/12/20/git%E3%81%A7%E6%8C%87%E5%AE%9A%E3%81%97%E3%81%9F%E3%82%B3%E3%83%9F%E3%83%83%E3%83%88id%E3%81%AE%E7%8A%B6%E6%85%8B%E3%81%AB%E6%88%BB%E3%81%99/</guid>
      <description>&lt;!--adsense--&gt;
&lt;p&gt;&lt;a href=&#34;http://qiita.com/ysekky/items/3db54349452dd8a336fb&#34;&gt;私が機械学習研究をするときのコード・データ管理方法 - Qiita&lt;/a&gt;がいい話で参考になった。
特に、データがどのプログラムから作成されたかをgitのコミットで管理するところが勉強になったのだけど、gitのコマンドをよく忘れてしまうので、ここに簡単な例を書いておいて、いつでも参照できるようにしておく。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
