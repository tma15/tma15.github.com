<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Now is better than never. </title>
    <link>http://tma15.github.io/tags/kaggle/</link>
    <language>en-us</language>
    <author></author>
    <rights>(C) 2017</rights>
    <updated>2017-07-29 15:30:01 &#43;0900 JST</updated>

    
      
        <item>
          <title>Kaggle初参加記録</title>
          <link>http://tma15.github.io/blog/2017/07/29/</link>
          <pubDate>Sat, 29 Jul 2017 15:30:01 JST</pubDate>
          <author></author>
          <guid>http://tma15.github.io/blog/2017/07/29/</guid>
          <description>

&lt;h2 id=&#34;概要&#34;&gt;概要&lt;/h2&gt;

&lt;p&gt;この一週間休暇を取っていて、多少の暇な時間があったので前から気になっていた&lt;a href=&#34;https://www.kaggle.com/&#34;&gt;Kaggle&lt;/a&gt;に手を付けてみた。
今回はチュートリアル的に公開されているtitanic号の生存予測タスクに参加した。
他の参加者がブログで公開されている&lt;a href=&#34;http://ahmedbesbes.com/how-to-score-08134-in-titanic-kaggle-challenge.html&#34;&gt;素性&lt;/a&gt;を参考に素性を設計した。
予測モデルには以前C++で実装した平均化パーセプトロンを用いた。
Scoreが0.79426 (2017/7/29 16:00時点で1428位/7247位) となった。
Kaggleを続けると、機械学習に関するエンジニア能力が高まりそうで良い。&lt;/p&gt;

&lt;h2 id=&#34;モデル&#34;&gt;モデル&lt;/h2&gt;

&lt;p&gt;生存予測モデルおよび年齢予測モデルには以前C++で&lt;a href=&#34;https://github.com/tma15/onlineml&#34;&gt;実装&lt;/a&gt;した平均化パーセプトロンを用いた。
平均化パーセプトロンを採用した積極的な理由があるわけではないのだが、今回はOSSに頼らずに、自分で実装した学習器を使いたかったので、消去法的に採用された。
実践的には広く知られたOSSのほうが、優秀なアルゴリズムが実装されていると思うし、バグの可能性も少ないと思うので、今回のようなアプローチはあまり得策ではないと思う。
おそらくランダムフォレストやSVMなどのモデルを利用する参加者が多い中で、パーセプトロンを利用した数少ない人間になるだろう。&lt;/p&gt;

&lt;p&gt;後述するが、本タスクで扱うデータには欠損値が存在する。
そこで、欠損値を予測するためのモデルを別途作成し、値を補完するためのモデルを作成した (これもやはり、平均化パーセプトロン) 。
生存予測モデルへの入力 (素性) を予測するモデルを作成しているので、全体構成としてはいわゆるstackingになっている。&lt;/p&gt;

&lt;h2 id=&#34;素性&#34;&gt;素性&lt;/h2&gt;

&lt;p&gt;メタデータ分析的に他の方がブログで公開されている&lt;a href=&#34;http://ahmedbesbes.com/how-to-score-08134-in-titanic-kaggle-challenge.html&#34;&gt;素性&lt;/a&gt;を参考に設計している。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;1-of-k表現

&lt;ol&gt;
&lt;li&gt;性別&lt;/li&gt;
&lt;li&gt;年齢 (0~9, 10~19, 20~29, 30~39, 40~49, 50~というカテゴリに修正している)&lt;/li&gt;
&lt;li&gt;チケット番号&lt;/li&gt;
&lt;li&gt;キャビン&lt;/li&gt;
&lt;li&gt;乗車地&lt;/li&gt;
&lt;li&gt;チケットのクラス&lt;/li&gt;
&lt;li&gt;親の人数&lt;/li&gt;
&lt;li&gt;兄弟の人数&lt;/li&gt;
&lt;li&gt;肩書 (名前から抽出した次の情報: Mr., Ms., Miss., Master.)&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;運賃 (値の正規化はしていない)&lt;/li&gt;
&lt;li&gt;組み合わせ素性

&lt;ol&gt;
&lt;li&gt;1.1および{1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8}&lt;/li&gt;
&lt;li&gt;1.6および{1.4, 1.5, 1.7, 1.8}&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;(1.2) このタスクで扱うデータでは、欠損値が存在する。例えば年齢は、生存者の予測に有効に働きそう (幼い子どもは優先的に救助されうる) なのだが、欠損値が少なからず存在する。
そこで、年齢が不明な事例に関しては、年齢を予測するためのモデルを事前に作成しておき、そのモデルによって年齢を予測し、補完した。
年齢予測モデルで利用した素性は1.1, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9で、予測ラベルは1.2の5クラスとした。精度はあまり高くなく、学習データ中で年齢が存在する事例を用いた交差検定で36%程度となった。&lt;/p&gt;

&lt;p&gt;(3) 例えば女性でかつランクの高いチケットで乗船していた人は、そうでない人よりも救助されうるのではないかと考えられるため、素性の組み合わせを陽に与えている。予測モデルは線形分類器なので、素性の組み合わせを明示的に考慮する。&lt;/p&gt;

&lt;h2 id=&#34;結果の投稿まで&#34;&gt;結果の投稿まで&lt;/h2&gt;

&lt;p&gt;交差検定により、学習データに対してAccuracyが高くなっていたら、結果を投稿して順位を確かめる、というサイクルを何回か繰り返した。
2017/7/29 16:00時点で1428位/7247位となった。Scoreが0.8を超えるとそこそこ良い&lt;a href=&#34;http://kefism.hatenablog.com/entry/2017/04/22/203740&#34;&gt;らしい&lt;/a&gt;ので、もう少し色々といじるかもしれない。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tma15.github.io/img/2017/07/29/kaggle.png&#34; alt=&#34;kaggle&#34; style=&#34;width: 800px;&#34;/&gt;&lt;/p&gt;

&lt;p&gt;実験に用いたプログラムは&lt;a href=&#34;https://github.com/tma15/titanic-on-kaggle&#34;&gt;GitHub&lt;/a&gt;に公開した。&lt;/p&gt;

&lt;h2 id=&#34;モデル-1&#34;&gt;モデル&lt;/h2&gt;

&lt;p&gt;交差検定で学習したあるモデルの中身 (重みが大きい上位20件の素性リスト) は次のようになっている。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tma15.github.io/img/2017/07/29/weight.png&#34; alt=&#34;kaggle&#34; style=&#34;width: 800px;&#34;/&gt;&lt;/p&gt;

&lt;p&gt;性別が女性でかつチケットのクラスが1 (高級？) とか、肩書がMaster (12歳くらいまでの若い少年 &lt;a href=&#34;https://en.wikipedia.org/wiki/Master_(form_of_address)&#34;&gt;Master (form of address)&lt;/a&gt;) であったりすると、生存の可能性が他の人よりも高いという感じの学習結果になっている。&lt;/p&gt;

&lt;h2 id=&#34;反省点&#34;&gt;反省点&lt;/h2&gt;

&lt;p&gt;ある修正によって、Accuracyがどれくらい変わるかみたいなログを取っていなかったので、方策がよかったのか、悪かったのかが頭のなかに曖昧にしか残らなくなってしまった。本当は修正によってAccuracyがどうなった、という情報をGitなどで管理するほうがよい。&lt;/p&gt;

&lt;h2 id=&#34;感想&#34;&gt;感想&lt;/h2&gt;

&lt;p&gt;とにかく有効そうな素性あるいはモデルをどんどん試す、というサイクルをひたすら回す感じで、実用的なエンジニアリング能力 (素性、モデルの設計能力や問題設定能力、あるいは効率的な実験の方法) が身につきそうだった。また、他の参加者と全く同じ問題を溶いているので、他の人が考えたことを共有してくれると、知見がたまって良いと思った。&lt;/p&gt;
</description>
        </item>
      
    

  </channel>
</rss>
